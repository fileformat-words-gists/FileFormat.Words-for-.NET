<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileFormat.Words.Examples</name>
    </assembly>
    <members>
        <member name="T:FileFormat.Words.Examples.ImageExamples">
            <summary>
            Provides C# code examples for creating, reading, and modifying Word images
            using the <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a> library.
            </summary>
            <example>
            <code>
            // Prepares directory Documents/Image at the root of your project.
            // Check reference for more options and details.
            ImageExamples imageExamples = new ImageExamples();
            // Reads images from the specified directory, creates and saves word document to the specified 
            // directory. Check reference for more options and details.
            imageExamples.CreateWordDocumentWithImages();
            // Read Images from the specified Word Document and displays image metadata.
            // Check reference for more options and details.
            imageExamples.ReadImagesInWordDocument();
            // Modify Images in the specified Word Document and saves the modified word document.
            // Check reference for more options and details.
            imageExamples.ModifyImagesInWordDocument();
            </code>
            </example>
        </member>
        <member name="M:FileFormat.Words.Examples.ImageExamples.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileFormat.Words.Examples.ImageExamples"/> class.
            Prepares the directory 'Documents/Image' for storing or loading Word documents
            at the root of the project.
            If the directory doesn't exist, it is created. If it already exists,
            existing files are deleted, and the directory is cleaned up.
            Prepares the directory 'Documents/Image/Images' to store images to be added
            to the word documents.
            </summary>
        </member>
        <member name="M:FileFormat.Words.Examples.ImageExamples.CreateWordDocumentWithImages(System.String,System.String,System.String)">
            <summary>
            Creates a new Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Loads images from the specified diretory and decodes using SkiaSharp.
            Creates a word document, appends loaded images and then saves the word document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document will be saved (default is the 'Documents/Image' directory auto-created at the root of your project).
            </param>
            <param name="imageDirectory">
            The directory from where the images will be loaded (default is "Documents/Image/Images").
            </param>
            <param name="filename">
            The name of the Word Document file (default is "WordImages.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ImageExamples.ReadImagesInWordDocument(System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses images and displays image metadata.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present
            (default is the 'Documents/Paragraph' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to load (default is "WordImages.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ImageExamples.ModifyImagesInWordDocument(System.String,System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Gets images from the word document. Decodes image using SkiaSharp and encode to JPG.
            Resize image to 250(height) and 200(width).
            Saves the modified Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present and
            the modified document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to modify (default is "WordImages.docx").
            </param>
            <param name="filenameModified">
            The name of the modified Word Document (default is "ModifiedWordImages.docx").
            </param>
        </member>
        <member name="T:FileFormat.Words.Examples.ParagraphAlignmentExamples">
            <summary>
            Provides C# code examples for creating, reading, and modifying alignment of Word paragraphs
            using the <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a> library.
            </summary>
            <example>
            <code>
            // Prepares directory Documents/Paragraph/Alignment at the root of your project.
            // Check reference for more options and details.
            ParagraphAlignmentExamples paragraphAlignment = new ParagraphAlignmentExamples();
            // Creates a word document with paragraphs having different alignments and saves word document
            // to the specified directory. Check reference for more options and details.
            paragraphAlignment.CreateAlignment();
            // Reads Paragraphs from the specified Word Document and displays plain text alongwith alignment.
            // Check reference for more options and details.
            paragraphAlignment.ReadAlignment();
            // Modifies Paragraph's alignment in the specified Word Document and saves the modified word document.
            // Check reference for more options and details.
            paragraphAlignment.ModifyAlignment();
            </code>
            </example>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphAlignmentExamples.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileFormat.Words.Examples.ParagraphAlignmentExamples"/> class.
            Prepares the directory 'Documents/Paragraph/Alignment' for storing or loading Word documents
            at the root of the project.
            If the directory doesn't exist, it is created. If it already exists,
            existing files are deleted, and the directory is cleaned up.
            </summary>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphAlignmentExamples.CreateAlignment(System.String,System.String)">
            <summary>
            Creates a new Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Generates paragraphs with different alignments including left, center, right and justify.
            Saves the newly created Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document will be saved (default is the 'Documents/Paragraph/Alignment' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file (default is "WordParagraphs.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphAlignmentExamples.ReadAlignment(System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses paragraphs and displays its text along with alignment.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present
            (default is the 'Documents/Paragraph/Alignment' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to load (default is "WordParagraphsAligned.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphAlignmentExamples.ModifyAlignment(System.String,System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses through all paragraphs within the document.
            Modifies paragraphs by appending ' (alignment modified to justify)' with italic format
            and justify alignment.
            Saves the modified Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present and
            the modified document will be saved (default is the 'Documents/Paragraph/Alignment' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to modify (default is "WordParagraphsAligned.docx").
            </param>
            <param name="filenameModified">
            The name of the modified Word Document (default is "ModifiedWordParagraphsAligned.docx").
            </param>
        </member>
        <member name="T:FileFormat.Words.Examples.ParagraphExamples">
            <summary>
            Provides C# code examples for creating, reading, and modifying Word paragraphs
            using the <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a> library.
            </summary>
            <example>
            <code>
            // Prepares directory Documents/Paragraph at the root of your project.
            // Check reference for more options and details.
            ParagraphExamples paragraphExamples = new ParagraphExamples();
            // Creates a word document with paragraphs and saves word document to the specified 
            // directory. Check reference for more options and details.
            paragraphExamples.CreateWordParagraphs();
            // Reads Paragraphs from the specified Word Document and displays plain text and formatting.
            // Check reference for more options and details.
            paragraphExamples.ReadWordParagraphs();
            // Modifies Paragraphs in the specified Word Document and saves the modified word document.
            // Check reference for more options and details.
            paragraphExamples.ModifyWordParagraphs();
            </code>
            </example>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphExamples.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileFormat.Words.Examples.ParagraphExamples"/> class.
            Prepares the directory 'Documents/Paragraph' for storing or loading Word documents
            at the root of the project.
            If the directory doesn't exist, it is created. If it already exists,
            existing files are deleted, and the directory is cleaned up.
            </summary>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphExamples.CreateWordParagraphs(System.String,System.String)">
            <summary>
            Creates a new Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Generates paragraphs with heading styles defined by the Word document template.
            Adds normal paragraphs under each heading paragraph, including text runs with various fonts as per the template.
            Saves the newly created Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file (default is "WordParagraphs.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphExamples.ReadWordParagraphs(System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses paragraphs and displays associated styles as defined by the Word document template.
            Traverses through each run (text fragment) within each paragraph and displays fragment values.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present
            (default is the 'Documents/Paragraph' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to load (default is "WordParagraphs.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphExamples.ModifyWordParagraphs(System.String,System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Modifies paragraphs by prepending 'Modified Heading :' for styled paragraphs
            and 'Modified Run :' for each run within normal paragraphs, preserving the existing format.
            Saves the modified Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present and
            the modified document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to modify (default is "WordParagraphs.docx").
            </param>
            <param name="filenameModified">
            The name of the modified Word Document (default is "ModifiedWordParagraphs.docx").
            </param>
        </member>
        <member name="T:FileFormat.Words.Examples.ParagraphIndentExamples">
            <summary>
            Provides C# code examples for creating, reading, and modifying indentation of Word paragraphs
            using the <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a> library.
            </summary>
            <example>
            <code>
            // Prepares directory Documents/Paragraph/Indent at the root of your project.
            // Check reference for more options and details.
            ParagraphIndentExamples paragraphIndentExamples = new ParagraphIndentExamples();
            // Creates a word document with paragraphs having various indentations and saves word document
            // to the specified directory. Check reference for more options and details.
            paragraphIndentExamples.CreateIndent();
            // Reads Paragraphs from the specified Word Document and displays plain text with indentation.
            // Check reference for more options and details.
            paragraphIndentExamples.ReadIndent();
            // Modifies Paragraph's indentation in the Word Document and saves the modified word document.
            // Check reference for more options and details.
            paragraphIndentExamples.ModifyIndent();
            </code>
            </example>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphIndentExamples.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileFormat.Words.Examples.ParagraphIndentExamples"/> class.
            Prepares the directory 'Documents/Paragraph/Indent' for storing or loading Word documents
            at the root of the project.
            If the directory doesn't exist, it is created. If it already exists,
            existing files are deleted, and the directory is cleaned up.
            </summary>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphIndentExamples.CreateIndent(System.String,System.String)">
            <summary>
            Creates a new Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Generates paragraphs with different indents including left, right, firstline and hanging.
            Saves the newly created Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file (default is "WordParagraphs.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphIndentExamples.ReadIndent(System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses paragraphs and displays its text along with indentation.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present
            (default is the 'Documents/Paragraph/Indent' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to load (default is "WordParagraphsIndented.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphIndentExamples.ModifyIndent(System.String,System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses through all paragraphs within the document.
            Modifies paragraphs by appending the relevant indent message in italic format
            and modifies the indent (if found) to 0.
            Saves the modified Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present and
            the modified document will be saved (default is the 'Documents/Paragraph/Indent' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to modify (default is "WordParagraphsIndented.docx").
            </param>
            <param name="filenameModified">
            The name of the modified Word Document (default is "ModifiedWordParagraphsIndented.docx").
            </param>
        </member>
        <member name="T:FileFormat.Words.Examples.ParagraphNumberExamples">
            <summary>
            Provides C# code examples for creating, reading, and modifying numbered paragraphs in DOCX word
            using the <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a> library.
            </summary>
            <example>
            <code>
            // Prepares directory Documents/Paragraph/Numbering at the root of your project.
            // Check reference for more options and details.
            var paragraphNumberExamples = new ParagraphNumberExamples();
            // Creates a word document with paragraphs having various numbering levels and saves word
            // document to the specified directory. Check reference for more options and details.
            paragraphNumberExamples.CreateNumberedParagraphs();
            // Reads Paragraphs from the specified Word Document and displays plain text alongwith numbering info.
            // Check reference for more options and details.
            paragraphNumberExamples.ReadNumberedParagraphs();
            // Modifies Paragraph's numbering in the specified Word Document and saves the modified word document.
            // Check reference for more options and details.
            paragraphNumberExamples.ModifyNumberedParagraphs();
            </code>
            </example>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphNumberExamples.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileFormat.Words.Examples.ParagraphNumberExamples"/> class.
            Prepares the directory 'Documents/Paragraph/Numbering' for storing or loading Word documents
            at the root of the project.
            If the directory doesn't exist, it is created. If it already exists,
            existing files are deleted, and the directory is cleaned up.
            </summary>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphNumberExamples.CreateNumberedParagraphs(System.String,System.String)">
            <summary>
            Creates a new Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Generates numbered paragraphs with nested levels.
            Saves the newly created Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document will be saved (default is the 'Documents/Paragraph/Numbering' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file (default is "WordParagraphsNumbered.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphNumberExamples.ReadNumberedParagraphs(System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses paragraphs and displays its text, numbering and level.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present
            (default is the 'Documents/Paragraph/Numbering' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to load (default is "WordParagraphsNumbered.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphNumberExamples.ModifyNumberedParagraphs(System.String,System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses through all paragraphs within the document.
            If numbered, modifies paragraphs by appending ' (numering removed)' with italic format
            and paragraph number is removed.
            Saves the modified Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present and
            the modified document will be saved (default is the 'Documents/Paragraph/Numbering' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to modify (default is "WordParagraphsNumbered.docx").
            </param>
            <param name="filenameModified">
            The name of the modified Word Document (default is "ModifiedWordParagraphsNumbered.docx").
            </param>
        </member>
        <member name="T:FileFormat.Words.Examples.ParagraphRomanAlphabeticExamples">
            <summary>
            Provides C# code examples for creating, reading, and modifying Roman+Alphabetic paragraphs in DOCX
            using the <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a> library.
            </summary>
            <example>
            <code>
            // Prepares directory Documents/Paragraph/RomanAlphabetic at the root of your project.
            // Check reference for more options and details.
            var paragraphRomanAlphabeticExamples = new ParagraphRomanAlphabeticExamples();
            // Creates a word document with paragraphs having roman and alphabetic levels and saves word
            // document to the specified directory. Check reference for more options and details.
            paragraphRomanAlphabeticExamples.CreateRomanAlphabeticParagraphs();
            // Reads Paragraphs from the specified Word Document and displays plain text with roman and alphabetic info.
            // Check reference for more options and details.
            paragraphRomanAlphabeticExamples.ReadRomanAlphabeticParagraphs();
            // Modifies Roman and Alphabetic paragraphs in the Word Document and saves the modified word document.
            // Check reference for more options and details.
            paragraphRomanAlphabeticExamples.ModifyRomanAlphabeticParagraphs();
            </code>
            </example>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphRomanAlphabeticExamples.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileFormat.Words.Examples.ParagraphRomanAlphabeticExamples"/> class.
            Prepares the directory 'Documents/Paragraph/RomanAlphabetic' for storing or loading Word documents
            at the root of the project.
            If the directory doesn't exist, it is created. If it already exists,
            existing files are deleted, and the directory is cleaned up.
            </summary>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphRomanAlphabeticExamples.CreateRomanAlphabeticParagraphs(System.String,System.String)">
            <summary>
            Creates a new Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Generates roman and alphabetic paragraphs with nested levels.
            Saves the newly created Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document will be saved (default is the 'Documents/Paragraph/RomanAlphabetic' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file (default is "WordParagraphsRomanAlphabetic.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphRomanAlphabeticExamples.ReadRomanAlphabeticParagraphs(System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses paragraphs and displays its text, roman/alphabetic status and level.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present
            (default is the 'Documents/Paragraph/RomanAlphabetic' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to load (default is "WordParagraphsRomanAlphabetic.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.ParagraphRomanAlphabeticExamples.ModifyRomanAlphabeticParagraphs(System.String,System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses through all paragraphs within the document.
            If alphabetic, modifies paragraphs by appending ' (alphabetic removed)' with italic format
            and paragraph alphabetic is removed.
            Saves the modified Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present and
            the modified document will be saved (default is the 'Documents/Paragraph/RomanAlphabetic' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to modify (default is "WordParagraphsRomanAlphabetic.docx").
            </param>
            <param name="filenameModified">
            The name of the modified Word Document (default is "ModifiedWordParagraphs.docx").
            </param>
        </member>
        <member name="T:FileFormat.Words.Examples.TableExamples">
            <summary>
            Provides C# code examples for creating, reading, and modifying Word tables
            using the <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a> library.
            </summary>
            <example>
            <code>
            // Prepares directory Documents/Table at the root of your project.
            // Check reference for more options and details.
            TableExamples tableExamples = new TableExamples();
            // Creates a word document with tables and saves word document to the specified 
            // directory. Check reference for more options and details.
            tableExamples.CreateWordDocumentWithTables();
            // Read tables from the specified Word Document and displays table contents.
            // Check reference for more options and details.
            tableExamples.ReadTablesInWordDocument();
            // Modify Images in the specified Word Document and saves the modified word document.
            // Check reference for more options and details.
            tableExamples.ModifyTablesInWordDocument();
            </code>
            </example>
        </member>
        <member name="M:FileFormat.Words.Examples.TableExamples.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FileFormat.Words.Examples.TableExamples"/> class.
            Prepares the directory 'Documents/Table' for storing or loading Word documents
            at the root of the project.
            If the directory doesn't exist, it is created. If it already exists,
            existing files are deleted, and the directory is cleaned up.
            </summary>
        </member>
        <member name="M:FileFormat.Words.Examples.TableExamples.CreateWordDocumentWithTables(System.String,System.String)">
            <summary>
            Creates a new Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Generates 5(rows) x 3(cols) tables with table styles defined by the Word document template.
            Appends each table to the body of the word document.
            Saves the newly created word document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document will be saved (default is the 'Documents/Table' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file (default is "WordTables.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.TableExamples.ReadTablesInWordDocument(System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Traverses tables and displays associated styles as defined by the Word document template.
            Traverses through each row and then traverses columns within the row.
            Traverses through paragrpahs within each cell and displays paragraph plain text
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present
            (default is the 'Documents/Table' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to load (default is "WordTables.docx").
            </param>
        </member>
        <member name="M:FileFormat.Words.Examples.TableExamples.ModifyTablesInWordDocument(System.String,System.String,System.String)">
            <summary>
            Loads a Word Document with structured content using 
            <a href="https://www.nuget.org/packages/FileFormat.Words">FileFormat.Words</a>.
            Modifies tables by setting column widths to 2000
            Saves the modified Word Document.
            </summary>
            <param name="documentDirectory">
            The directory where the Word Document to load is present and
            the modified document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project).
            </param>
            <param name="filename">
            The name of the Word Document file to modify (default is "WordTables.docx").
            </param>
            <param name="filenameModified">
            The name of the modified Word Document (default is "ModifiedWordTables.docx").
            </param>
        </member>
    </members>
</doc>
