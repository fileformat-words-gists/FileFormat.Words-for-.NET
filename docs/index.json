{
  "api/FileFormat.Words.Examples.ImageExamples.html": {
    "href": "api/FileFormat.Words.Examples.ImageExamples.html",
    "title": "ImageExamples Class - Word Images C# | Words FileFormat",
    "keywords": "Class ImageExamples Namespace FileFormat.Words.Examples Assembly FileFormat.Words.Examples.dll Provides C# code examples for creating, reading, and modifying Word images using the FileFormat.Words library. public class ImageExamples Inheritance object ImageExamples Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Examples // Prepares directory Documents/Image at the root of your project. // Check reference for more options and details. var imageExamples = new ImageExamples(); // Reads images from the specified directory, creates and saves word document to the specified // directory. Check reference for more options and details. imageExamples.CreateWordDocumentWithImages(); // Read Images from the specified Word Document and displays image metadata. // Check reference for more options and details. imageExamples.ReadImagesInWordDocument(); // Modify Images in the specified Word Document and saves the modified word document. // Check reference for more options and details. imageExamples.ModifyImagesInWordDocument(); Constructors ImageExamples() Initializes a new instance of the ImageExamples class. Prepares the directory 'Documents/Image' for storing or loading Word documents at the root of the project. If the directory doesn't exist, it is created. If it already exists, existing files are deleted, and the directory is cleaned up. Prepares the directory 'Documents/Image/Images' to store images to be added to the word documents. public ImageExamples() Methods CreateWordDocumentWithImages(string, string, string) Creates a new Word Document with structured content using FileFormat.Words. Loads images from the specified diretory and decodes using SkiaSharp. Creates a word document, appends loaded images and then saves the word document. public void CreateWordDocumentWithImages(string documentDirectory = \"../../../Documents/Image\", string imageDirectory = \"../../../Documents/Image/Images\", string filename = \"WordImages.docx\") Parameters documentDirectory string The directory where the Word Document will be saved (default is the 'Documents/Image' directory auto-created at the root of your project). imageDirectory string The directory from where the images will be loaded (default is \"Documents/Image/Images\"). filename string The name of the Word Document file (default is \"WordImages.docx\"). ModifyImagesInWordDocument(string, string, string) Loads a Word Document with structured content using FileFormat.Words. Gets images from the word document. Decodes image using SkiaSharp and encode to JPG. Resize image to 250(height) and 200(width). Saves the modified Word Document. public void ModifyImagesInWordDocument(string documentDirectory = \"../../../Documents/Image\", string filename = \"WordImages.docx\", string filenameModified = \"ModifiedWordImages.docx\") Parameters documentDirectory string The directory where the Word Document to load is present and the modified document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project). filename string The name of the Word Document file to modify (default is \"WordImages.docx\"). filenameModified string The name of the modified Word Document (default is \"ModifiedWordImages.docx\"). ReadImagesInWordDocument(string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses images and displays image metadata. public void ReadImagesInWordDocument(string documentDirectory = \"../../../Documents/Image\", string filename = \"WordImages.docx\") Parameters documentDirectory string The directory where the Word Document to load is present (default is the 'Documents/Paragraph' directory auto-created at the root of your project). filename string The name of the Word Document file to load (default is \"WordImages.docx\")."
  },
  "api/FileFormat.Words.Examples.ListExamples.html": {
    "href": "api/FileFormat.Words.Examples.ListExamples.html",
    "title": "Class ListExamples | Words FileFormat",
    "keywords": "Class ListExamples Namespace FileFormat.Words.Examples Assembly FileFormat.Words.Examples.dll Provides C# code examples for creating, reading, and modifying Roman+Alphabetic paragraphs in DOCX using the FileFormat.Words library. public class ListExamples Inheritance object ListExamples Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Examples // Prepares directory Documents/Paragraph/List at the root of your project. // Check reference for more options and details. var listExamples = new ListExamples(); // Creates a word document with two mulitlevel lists each having 3 levels and saves word // document to the specified directory. Check reference for more options and details. listExamples.CreateMultilevelLists(); // Reads Paragraphs from the specified Word Document and displays plain text with prefix info at each level. // Check reference for more options and details. listExamples.ReadMultilevelLists(); // Modifies list paragraphs in the Word Document and saves the modified word document. // Check reference for more options and details. listExamples.ModiyMultilevelLists(); Constructors ListExamples() Initializes a new instance of the ListExamples class. Prepares the directory 'Documents/Paragraph/List' for storing or loading Word documents at the root of the project. If the directory doesn't exist, it is created. If it already exists, existing files are deleted, and the directory is cleaned up. public ListExamples() Methods CreateMultilevelLists(string, string) Creates a new Word Document with structured content using FileFormat.Words. Generates roman and alphabetic paragraphs with nested levels. Saves the newly created Word Document. public void CreateMultilevelLists(string documentDirectory = \"../../../Documents/Paragraph/List\", string filename = \"WordListParagraphs.docx\") Parameters documentDirectory string The directory where the Word Document will be saved (default is the 'Documents/Paragraph/List' directory auto-created at the root of your project). filename string The name of the Word Document file (default is \"WordListParagraphs.docx\"). ModifyMultilevelLists(string, string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses through all paragraphs within the document. If alphabetic, modifies paragraphs by appending ' (numbering type changed to numeric)' with italic format and paragraph numbering type is changed to numeric. Saves the modified Word Document. public void ModifyMultilevelLists(string documentDirectory = \"../../../Documents/Paragraph/List\", string filename = \"WordListParagraphs.docx\", string filenameModified = \"ModifiedWordListParagraphs.docx\") Parameters documentDirectory string The directory where the Word Document to load is present and the modified document will be saved (default is the 'Documents/Paragraph/List' directory auto-created at the root of your project). filename string The name of the Word Document file to modify (default is \"WordListParagraphs.docx\"). filenameModified string The name of the modified Word Document (default is \"ModifiedWordListParagraphs.docx\"). ReadMultilevelLists(string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses paragraphs and displays its text, roman/alphabetic status and level. public void ReadMultilevelLists(string documentDirectory = \"../../../Documents/Paragraph/List\", string filename = \"WordListParagraphs.docx\") Parameters documentDirectory string The directory where the Word Document to load is present (default is the 'Documents/Paragraph/List' directory auto-created at the root of your project). filename string The name of the Word Document file to load (default is \"WordListParagraphs.docx\")."
  },
  "api/FileFormat.Words.Examples.ParagraphAlignmentExamples.html": {
    "href": "api/FileFormat.Words.Examples.ParagraphAlignmentExamples.html",
    "title": "Class ParagraphAlignmentExamples | Words FileFormat",
    "keywords": "Class ParagraphAlignmentExamples Namespace FileFormat.Words.Examples Assembly FileFormat.Words.Examples.dll Provides C# code examples for creating, reading, and modifying alignment of Word paragraphs using the FileFormat.Words library. public class ParagraphAlignmentExamples Inheritance object ParagraphAlignmentExamples Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Examples // Prepares directory Documents/Paragraph/Alignment at the root of your project. // Check reference for more options and details. var paragraphAlignment = new ParagraphAlignmentExamples(); // Creates a word document with paragraphs having different alignments and saves word document // to the specified directory. Check reference for more options and details. paragraphAlignment.CreateAlignment(); // Reads Paragraphs from the specified Word Document and displays plain text alongwith alignment. // Check reference for more options and details. paragraphAlignment.ReadAlignment(); // Modifies Paragraph's alignment in the specified Word Document and saves the modified word document. // Check reference for more options and details. paragraphAlignment.ModifyAlignment(); Constructors ParagraphAlignmentExamples() Initializes a new instance of the ParagraphAlignmentExamples class. Prepares the directory 'Documents/Paragraph/Alignment' for storing or loading Word documents at the root of the project. If the directory doesn't exist, it is created. If it already exists, existing files are deleted, and the directory is cleaned up. public ParagraphAlignmentExamples() Methods CreateAlignment(string, string) Creates a new Word Document with structured content using FileFormat.Words. Generates paragraphs with different alignments including left, center, right and justify. Saves the newly created Word Document. public void CreateAlignment(string documentDirectory = \"../../../Documents/Paragraph/Alignment\", string filename = \"WordParagraphsAligned.docx\") Parameters documentDirectory string The directory where the Word Document will be saved (default is the 'Documents/Paragraph/Alignment' directory auto-created at the root of your project). filename string The name of the Word Document file (default is \"WordParagraphs.docx\"). ModifyAlignment(string, string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses through all paragraphs within the document. Modifies paragraphs by appending ' (alignment modified to justify)' with italic format and justify alignment. Saves the modified Word Document. public void ModifyAlignment(string documentDirectory = \"../../../Documents/Paragraph/Alignment\", string filename = \"WordParagraphsAligned.docx\", string filenameModified = \"ModifiedWordParagraphsAligned.docx\") Parameters documentDirectory string The directory where the Word Document to load is present and the modified document will be saved (default is the 'Documents/Paragraph/Alignment' directory auto-created at the root of your project). filename string The name of the Word Document file to modify (default is \"WordParagraphsAligned.docx\"). filenameModified string The name of the modified Word Document (default is \"ModifiedWordParagraphsAligned.docx\"). ReadAlignment(string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses paragraphs and displays its text along with alignment. public void ReadAlignment(string documentDirectory = \"../../../Documents/Paragraph/Alignment\", string filename = \"WordParagraphsAligned.docx\") Parameters documentDirectory string The directory where the Word Document to load is present (default is the 'Documents/Paragraph/Alignment' directory auto-created at the root of your project). filename string The name of the Word Document file to load (default is \"WordParagraphsAligned.docx\")."
  },
  "api/FileFormat.Words.Examples.ParagraphExamples.html": {
    "href": "api/FileFormat.Words.Examples.ParagraphExamples.html",
    "title": "ParagraphExamples Class - Word Paragraphs C# | Words FileFormat",
    "keywords": "Class ParagraphExamples Namespace FileFormat.Words.Examples Assembly FileFormat.Words.Examples.dll Provides C# code examples for creating, reading, and modifying Word paragraphs using the FileFormat.Words library. public class ParagraphExamples Inheritance object ParagraphExamples Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Examples // Prepares directory Documents/Paragraph at the root of your project. // Check reference for more options and details. var paragraphExamples = new ParagraphExamples(); // Creates a word document with paragraphs and saves word document to the specified // directory. Check reference for more options and details. paragraphExamples.CreateWordParagraphs(); // Reads Paragraphs from the specified Word Document and displays plain text and formatting. // Check reference for more options and details. paragraphExamples.ReadWordParagraphs(); // Modifies Paragraphs in the specified Word Document and saves the modified word document. // Check reference for more options and details. paragraphExamples.ModifyWordParagraphs(); Constructors ParagraphExamples() Initializes a new instance of the ParagraphExamples class. Prepares the directory 'Documents/Paragraph' for storing or loading Word documents at the root of the project. If the directory doesn't exist, it is created. If it already exists, existing files are deleted, and the directory is cleaned up. public ParagraphExamples() Methods CreateWordParagraphs(string, string) Creates a new Word Document with structured content using FileFormat.Words. Generates paragraphs with heading styles defined by the Word document template. Adds normal paragraphs under each heading paragraph, including text runs with various fonts as per the template. Saves the newly created Word Document. public void CreateWordParagraphs(string documentDirectory = \"../../../Documents/Paragraph\", string filename = \"WordParagraphs.docx\") Parameters documentDirectory string The directory where the Word Document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project). filename string The name of the Word Document file (default is \"WordParagraphs.docx\"). ModifyWordParagraphs(string, string, string) Loads a Word Document with structured content using FileFormat.Words. Modifies paragraphs by prepending 'Modified Heading :' for styled paragraphs and 'Modified Run :' for each run within normal paragraphs, preserving the existing format. Saves the modified Word Document. public void ModifyWordParagraphs(string documentDirectory = \"../../../Documents/Paragraph\", string filename = \"WordParagraphs.docx\", string filenameModified = \"ModifiedWordParagraphs.docx\") Parameters documentDirectory string The directory where the Word Document to load is present and the modified document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project). filename string The name of the Word Document file to modify (default is \"WordParagraphs.docx\"). filenameModified string The name of the modified Word Document (default is \"ModifiedWordParagraphs.docx\"). ReadWordParagraphs(string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses paragraphs and displays associated styles as defined by the Word document template. Traverses through each run (text fragment) within each paragraph and displays fragment values. public void ReadWordParagraphs(string documentDirectory = \"../../../Documents/Paragraph\", string filename = \"WordParagraphs.docx\") Parameters documentDirectory string The directory where the Word Document to load is present (default is the 'Documents/Paragraph' directory auto-created at the root of your project). filename string The name of the Word Document file to load (default is \"WordParagraphs.docx\")."
  },
  "api/FileFormat.Words.Examples.ParagraphIndentExamples.html": {
    "href": "api/FileFormat.Words.Examples.ParagraphIndentExamples.html",
    "title": "Class ParagraphIndentExamples | Words FileFormat",
    "keywords": "Class ParagraphIndentExamples Namespace FileFormat.Words.Examples Assembly FileFormat.Words.Examples.dll Provides C# code examples for creating, reading, and modifying indentation of Word paragraphs using the FileFormat.Words library. public class ParagraphIndentExamples Inheritance object ParagraphIndentExamples Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Examples // Prepares directory Documents/Paragraph/Indent at the root of your project. // Check reference for more options and details. var paragraphIndentExamples = new ParagraphIndentExamples(); // Creates a word document with paragraphs having various indentations and saves word document // to the specified directory. Check reference for more options and details. paragraphIndentExamples.CreateIndent(); // Reads Paragraphs from the specified Word Document and displays plain text with indentation. // Check reference for more options and details. paragraphIndentExamples.ReadIndent(); // Modifies Paragraph's indentation in the Word Document and saves the modified word document. // Check reference for more options and details. paragraphIndentExamples.ModifyIndent(); Constructors ParagraphIndentExamples() Initializes a new instance of the ParagraphIndentExamples class. Prepares the directory 'Documents/Paragraph/Indent' for storing or loading Word documents at the root of the project. If the directory doesn't exist, it is created. If it already exists, existing files are deleted, and the directory is cleaned up. public ParagraphIndentExamples() Methods CreateIndent(string, string) Creates a new Word Document with structured content using FileFormat.Words. Generates paragraphs with different indents including left, right, firstline and hanging. Saves the newly created Word Document. public void CreateIndent(string documentDirectory = \"../../../Documents/Paragraph/Indent\", string filename = \"WordParagraphsIndented.docx\") Parameters documentDirectory string The directory where the Word Document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project). filename string The name of the Word Document file (default is \"WordParagraphs.docx\"). ModifyIndent(string, string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses through all paragraphs within the document. Modifies paragraphs by appending the relevant indent message in italic format and modifies the indent (if found) to 0. Saves the modified Word Document. public void ModifyIndent(string documentDirectory = \"../../../Documents/Paragraph/Indent\", string filename = \"WordParagraphsIndented.docx\", string filenameModified = \"ModifiedWordParagraphsIndented.docx\") Parameters documentDirectory string The directory where the Word Document to load is present and the modified document will be saved (default is the 'Documents/Paragraph/Indent' directory auto-created at the root of your project). filename string The name of the Word Document file to modify (default is \"WordParagraphsIndented.docx\"). filenameModified string The name of the modified Word Document (default is \"ModifiedWordParagraphsIndented.docx\"). ReadIndent(string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses paragraphs and displays its text along with indentation. public void ReadIndent(string documentDirectory = \"../../../Documents/Paragraph/Indent\", string filename = \"WordParagraphsIndented.docx\") Parameters documentDirectory string The directory where the Word Document to load is present (default is the 'Documents/Paragraph/Indent' directory auto-created at the root of your project). filename string The name of the Word Document file to load (default is \"WordParagraphsIndented.docx\")."
  },
  "api/FileFormat.Words.Examples.ParagraphNumberExamples.html": {
    "href": "api/FileFormat.Words.Examples.ParagraphNumberExamples.html",
    "title": "Class ParagraphNumberExamples | Words FileFormat",
    "keywords": "Class ParagraphNumberExamples Namespace FileFormat.Words.Examples Assembly FileFormat.Words.Examples.dll Provides C# code examples for creating, reading, and modifying numbered paragraphs in DOCX word using the FileFormat.Words library. public class ParagraphNumberExamples Inheritance object ParagraphNumberExamples Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Examples // Prepares directory Documents/Paragraph/Numbering at the root of your project. // Check reference for more options and details. var paragraphNumberExamples = new ParagraphNumberExamples(); // Creates a word document with paragraphs having various numbering levels and saves word // document to the specified directory. Check reference for more options and details. paragraphNumberExamples.CreateNumberedParagraphs(); // Reads Paragraphs from the specified Word Document and displays plain text alongwith numbering info. // Check reference for more options and details. paragraphNumberExamples.ReadNumberedParagraphs(); // Modifies Paragraph's numbering in the specified Word Document and saves the modified word document. // Check reference for more options and details. paragraphNumberExamples.ModifyNumberedParagraphs(); Constructors ParagraphNumberExamples() Initializes a new instance of the ParagraphNumberExamples class. Prepares the directory 'Documents/Paragraph/Numbering' for storing or loading Word documents at the root of the project. If the directory doesn't exist, it is created. If it already exists, existing files are deleted, and the directory is cleaned up. public ParagraphNumberExamples() Methods CreateNumberedParagraphs(string, string) Creates a new Word Document with structured content using FileFormat.Words. Generates numbered paragraphs with nested levels. Saves the newly created Word Document. public void CreateNumberedParagraphs(string documentDirectory = \"../../../Documents/Paragraph/Numbering\", string filename = \"WordParagraphsNumbered.docx\") Parameters documentDirectory string The directory where the Word Document will be saved (default is the 'Documents/Paragraph/Numbering' directory auto-created at the root of your project). filename string The name of the Word Document file (default is \"WordParagraphsNumbered.docx\"). ModifyNumberedParagraphs(string, string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses through all paragraphs within the document. If numbered, modifies paragraphs by appending ' (numering removed)' with italic format and paragraph number is removed. Saves the modified Word Document. public void ModifyNumberedParagraphs(string documentDirectory = \"../../../Documents/Paragraph/Numbering\", string filename = \"WordParagraphsNumbered.docx\", string filenameModified = \"ModifiedWordParagraphsNumbered.docx\") Parameters documentDirectory string The directory where the Word Document to load is present and the modified document will be saved (default is the 'Documents/Paragraph/Numbering' directory auto-created at the root of your project). filename string The name of the Word Document file to modify (default is \"WordParagraphsNumbered.docx\"). filenameModified string The name of the modified Word Document (default is \"ModifiedWordParagraphsNumbered.docx\"). ReadNumberedParagraphs(string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses paragraphs and displays its text, numbering and level. public void ReadNumberedParagraphs(string documentDirectory = \"../../../Documents/Paragraph/Numbering\", string filename = \"WordParagraphsNumbered.docx\") Parameters documentDirectory string The directory where the Word Document to load is present (default is the 'Documents/Paragraph/Numbering' directory auto-created at the root of your project). filename string The name of the Word Document file to load (default is \"WordParagraphsNumbered.docx\")."
  },
  "api/FileFormat.Words.Examples.ParagraphRomanAlphabeticExamples.html": {
    "href": "api/FileFormat.Words.Examples.ParagraphRomanAlphabeticExamples.html",
    "title": "Class ParagraphRomanAlphabeticExamples | Words FileFormat",
    "keywords": "Class ParagraphRomanAlphabeticExamples Namespace FileFormat.Words.Examples Assembly FileFormat.Words.Examples.dll Provides C# code examples for creating, reading, and modifying Roman+Alphabetic paragraphs in DOCX using the FileFormat.Words library. public class ParagraphRomanAlphabeticExamples Inheritance object ParagraphRomanAlphabeticExamples Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Examples // Prepares directory Documents/Paragraph/RomanAlphabetic at the root of your project. // Check reference for more options and details. var paragraphRomanAlphabeticExamples = new ParagraphRomanAlphabeticExamples(); // Creates a word document with paragraphs having roman and alphabetic levels and saves word // document to the specified directory. Check reference for more options and details. paragraphRomanAlphabeticExamples.CreateRomanAlphabeticParagraphs(); // Reads Paragraphs from the specified Word Document and displays plain text with roman and alphabetic info. // Check reference for more options and details. paragraphRomanAlphabeticExamples.ReadRomanAlphabeticParagraphs(); // Modifies Roman and Alphabetic paragraphs in the Word Document and saves the modified word document. // Check reference for more options and details. paragraphRomanAlphabeticExamples.ModifyRomanAlphabeticParagraphs(); Constructors ParagraphRomanAlphabeticExamples() Initializes a new instance of the ParagraphRomanAlphabeticExamples class. Prepares the directory 'Documents/Paragraph/RomanAlphabetic' for storing or loading Word documents at the root of the project. If the directory doesn't exist, it is created. If it already exists, existing files are deleted, and the directory is cleaned up. public ParagraphRomanAlphabeticExamples() Methods CreateRomanAlphabeticParagraphs(string, string) Creates a new Word Document with structured content using FileFormat.Words. Generates roman and alphabetic paragraphs with nested levels. Saves the newly created Word Document. public void CreateRomanAlphabeticParagraphs(string documentDirectory = \"../../../Documents/Paragraph/RomanAlphabetic\", string filename = \"WordParagraphsRomanAlphabetic.docx\") Parameters documentDirectory string The directory where the Word Document will be saved (default is the 'Documents/Paragraph/RomanAlphabetic' directory auto-created at the root of your project). filename string The name of the Word Document file (default is \"WordParagraphsRomanAlphabetic.docx\"). ModifyRomanAlphabeticParagraphs(string, string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses through all paragraphs within the document. If alphabetic, modifies paragraphs by appending ' (alphabetic removed)' with italic format and paragraph alphabetic is removed. Saves the modified Word Document. public void ModifyRomanAlphabeticParagraphs(string documentDirectory = \"../../../Documents/Paragraph/RomanAlphabetic\", string filename = \"WordParagraphsRomanAlphabetic.docx\", string filenameModified = \"ModifiedWordParagraphs.docx\") Parameters documentDirectory string The directory where the Word Document to load is present and the modified document will be saved (default is the 'Documents/Paragraph/RomanAlphabetic' directory auto-created at the root of your project). filename string The name of the Word Document file to modify (default is \"WordParagraphsRomanAlphabetic.docx\"). filenameModified string The name of the modified Word Document (default is \"ModifiedWordParagraphs.docx\"). ReadRomanAlphabeticParagraphs(string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses paragraphs and displays its text, roman/alphabetic status and level. public void ReadRomanAlphabeticParagraphs(string documentDirectory = \"../../../Documents/Paragraph/RomanAlphabetic\", string filename = \"WordParagraphsRomanAlphabetic.docx\") Parameters documentDirectory string The directory where the Word Document to load is present (default is the 'Documents/Paragraph/RomanAlphabetic' directory auto-created at the root of your project). filename string The name of the Word Document file to load (default is \"WordParagraphsRomanAlphabetic.docx\")."
  },
  "api/FileFormat.Words.Examples.TableExamples.html": {
    "href": "api/FileFormat.Words.Examples.TableExamples.html",
    "title": "Class TableExamples | Words FileFormat",
    "keywords": "Class TableExamples Namespace FileFormat.Words.Examples Assembly FileFormat.Words.Examples.dll Provides C# code examples for creating, reading, and modifying Word tables using the FileFormat.Words library. public class TableExamples Inheritance object TableExamples Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Examples // Prepares directory Documents/Table at the root of your project. // Check reference for more options and details. var tableExamples = new TableExamples(); // Creates a word document with tables and saves word document to the specified // directory. Check reference for more options and details. tableExamples.CreateWordDocumentWithTables(); // Read tables from the specified Word Document and displays table contents. // Check reference for more options and details. tableExamples.ReadTablesInWordDocument(); // Modify Images in the specified Word Document and saves the modified word document. // Check reference for more options and details. tableExamples.ModifyTablesInWordDocument(); Constructors TableExamples() Initializes a new instance of the TableExamples class. Prepares the directory 'Documents/Table' for storing or loading Word documents at the root of the project. If the directory doesn't exist, it is created. If it already exists, existing files are deleted, and the directory is cleaned up. public TableExamples() Methods CreateWordDocumentWithTables(string, string) Creates a new Word Document with structured content using FileFormat.Words. Generates 5(rows) x 3(cols) tables with table styles defined by the Word document template. Appends each table to the body of the word document. Saves the newly created word document. public void CreateWordDocumentWithTables(string documentDirectory = \"../../../Documents/Table\", string filename = \"WordTables.docx\") Parameters documentDirectory string The directory where the Word Document will be saved (default is the 'Documents/Table' directory auto-created at the root of your project). filename string The name of the Word Document file (default is \"WordTables.docx\"). ModifyTablesInWordDocument(string, string, string) Loads a Word Document with structured content using FileFormat.Words. Modifies tables by setting column widths to 2000 Saves the modified Word Document. public void ModifyTablesInWordDocument(string documentDirectory = \"../../../Documents/Table\", string filename = \"WordTables.docx\", string filenameModified = \"ModifiedWordTables.docx\") Parameters documentDirectory string The directory where the Word Document to load is present and the modified document will be saved (default is the 'Documents/Paragraph' directory auto-created at the root of your project). filename string The name of the Word Document file to modify (default is \"WordTables.docx\"). filenameModified string The name of the modified Word Document (default is \"ModifiedWordTables.docx\"). ReadTablesInWordDocument(string, string) Loads a Word Document with structured content using FileFormat.Words. Traverses tables and displays associated styles as defined by the Word document template. Traverses through each row and then traverses columns within the row. Traverses through paragrpahs within each cell and displays paragraph plain text public void ReadTablesInWordDocument(string documentDirectory = \"../../../Documents/Table\", string filename = \"WordTables.docx\") Parameters documentDirectory string The directory where the Word Document to load is present (default is the 'Documents/Table' directory auto-created at the root of your project). filename string The name of the Word Document file to load (default is \"WordTables.docx\")."
  },
  "api/FileFormat.Words.Examples.html": {
    "href": "api/FileFormat.Words.Examples.html",
    "title": "FileFormat.Words.Examples Namespace - Word Documents C# | Words FileFormat",
    "keywords": "Namespace FileFormat.Words.Examples Classes ImageExamples Provides C# code examples for creating, reading, and modifying Word images using the FileFormat.Words library. ListExamples Provides C# code examples for creating, reading, and modifying Roman+Alphabetic paragraphs in DOCX using the FileFormat.Words library. ParagraphAlignmentExamples Provides C# code examples for creating, reading, and modifying alignment of Word paragraphs using the FileFormat.Words library. ParagraphExamples Provides C# code examples for creating, reading, and modifying Word paragraphs using the FileFormat.Words library. ParagraphIndentExamples Provides C# code examples for creating, reading, and modifying indentation of Word paragraphs using the FileFormat.Words library. ParagraphNumberExamples Provides C# code examples for creating, reading, and modifying numbered paragraphs in DOCX word using the FileFormat.Words library. ParagraphRomanAlphabeticExamples Provides C# code examples for creating, reading, and modifying Roman+Alphabetic paragraphs in DOCX using the FileFormat.Words library. TableExamples Provides C# code examples for creating, reading, and modifying Word tables using the FileFormat.Words library."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "C# Word Document Contents Manipulation Examples | Words FileFormat",
    "keywords": "Unleash the power of FileFormat.Words API FileFormat.Words for .NET is an open source C# library to work with Microsoft Word Documents in C#. FileFormat.Words.Examples represents the API Reference of C# code examples to work with Paragraphs, Images and Tables within a word document using FileFormat.Words for .NET. FileFormat.Words.Examples Namespace Pre-Requisite Make sure to have below nuget packages installed: FileFormat.Words SkiaSharp"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Learning Resources for FileFormat.Words APIs and Examples | Words FileFormat",
    "keywords": "Learning Resources FileFormat.Words for .NET FileFormat.Words for .NET is an API to work with Microsoft Word documents in your C# / ASP.NET / VB.NET projects. Below are relevant resources: Source Code Docs and API References Nuget Package FileFormat.Words.Examples FileFormat.Words.Examples are examples to demonstrate Microsoft Word documents manipulation using FileFormat.Words for .NET. Below are relevant resources: Source Code Docs and API References Nuget Package Contact Us Create an issue on any of the GitHub projects OR create a topic in our forum: FileFormat Forum Other Resources Product Pages Blogs Docs"
  },
  "index.html": {
    "href": "index.html",
    "title": "Explore FileFormat.Words API Usage C# Examples | Words FileFormat",
    "keywords": "FileFormat.Words.Examples Project Welcome to the homepage of FileFormat.Words.Examples project. This project represents comprehensive code examples to manipulate word documents using FileFormat.Words for .NET API. Please go through the package source code and adjust the code to suit your particular requirements. API Reference C# Examples to use FileFormat.Words for .NET API have been created in the form of an API. Click below to explore examples API Reference: API Reference Articles Please click below article to explore more learning resources: Articles"
  }
}